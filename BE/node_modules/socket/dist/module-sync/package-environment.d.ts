import { Logger } from '@socketsecurity/registry/lib/logger'
import { Remap } from '@socketsecurity/registry/lib/objects'
import { EditablePackageJson } from '@socketsecurity/registry/lib/packages'
import { SemVer } from 'semver'
declare const AGENTS: readonly [
  'bun',
  'npm',
  'pnpm',
  'yarn/berry',
  'yarn/classic',
  'vlt'
]
type Agent = (typeof AGENTS)[number]
type EnvBase = {
  agent: Agent
  agentExecPath: string
  agentSupported: boolean
  features: {
    npmBuggyOverrides: boolean
  }
  nodeSupported: boolean
  nodeVersion: SemVer
  npmExecPath: string
  pkgRequirements: {
    agent: string
    node: string
  }
  pkgSupports: {
    agent: boolean
    node: boolean
  }
}
type EnvDetails = Readonly<
  Remap<
    EnvBase & {
      agentVersion: SemVer
      editablePkgJson: EditablePackageJson
      lockName: string
      lockPath: string
      lockSrc: string
      pkgPath: string
    }
  >
>
type PartialEnvDetails = Readonly<
  Remap<
    EnvBase & {
      agentVersion: SemVer | undefined
      editablePkgJson: EditablePackageJson | undefined
      lockName: string | undefined
      lockPath: string | undefined
      lockSrc: string | undefined
      pkgPath: string | undefined
    }
  >
>
type DetectOptions = {
  cwd?: string | undefined
  onUnknown?: (pkgManager: string | undefined) => void
}
declare function detectPackageEnvironment({
  cwd,
  onUnknown
}?: DetectOptions): Promise<EnvDetails | PartialEnvDetails>
type DetectAndValidateOptions = {
  cmdName?: string | undefined
  logger?: Logger | undefined
  prod?: boolean | undefined
}
declare function detectAndValidatePackageEnvironment(
  cwd: string,
  options?: DetectAndValidateOptions | undefined
): Promise<void | EnvDetails>
export {
  AGENTS,
  Agent,
  EnvDetails,
  PartialEnvDetails,
  DetectOptions,
  detectPackageEnvironment,
  DetectAndValidateOptions,
  detectAndValidatePackageEnvironment
}
